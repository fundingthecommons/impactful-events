name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  DATABASE_URL: postgresql://test:test@localhost:5432/ftc_test
  TEST_DATABASE_URL: postgresql://test:test@localhost:5432/ftc_test
  NODE_ENV: test
  EMAIL_MODE: test
  TEST_EMAIL_OVERRIDE: test@example.com
  AUTH_SECRET: test-secret-for-ci-only
  AUTH_URL: http://localhost:3000
  SKIP_ENV_VALIDATION: true

jobs:
  lint-and-type-check:
    runs-on: ubuntu-latest
    name: Lint and Type Check
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      
      - name: Install dependencies
        run: bun install
      
      - name: Run linter
        run: bun run lint
      
      - name: Run type checking
        run: bun run typecheck
      
      - name: Check formatting
        run: bun run format:check

  unit-and-integration-tests:
    runs-on: ubuntu-latest
    name: Unit and Integration Tests
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: ftc_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      
      - name: Install dependencies
        run: bun install
      
      - name: Setup test database
        run: |
          bunx prisma migrate deploy
          bunx prisma db seed
      
      - name: Run unit tests
        run: bun run test:unit
      
      - name: Run integration tests
        run: bun run test:integration
      
      - name: Run email-specific tests
        run: bun run test:email
      
      - name: Generate coverage report
        run: bun run test:coverage
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  e2e-tests:
    runs-on: ubuntu-latest
    name: E2E Tests
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: ftc_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      
      - name: Install dependencies
        run: bun install
      
      - name: Setup test database
        run: |
          bunx prisma migrate deploy
          bunx prisma db seed
      
      - name: Install Playwright browsers
        run: bunx playwright install --with-deps
      
      - name: Build application
        run: bun run build
      
      - name: Run E2E tests
        run: bun run test:e2e
      
      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test-results/
          retention-days: 30

  email-audit:
    runs-on: ubuntu-latest
    name: Email Safety Audit
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: ftc_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      
      - name: Install dependencies
        run: bun install
      
      - name: Setup test database
        run: |
          bunx prisma migrate deploy
      
      - name: Run email audit tests
        run: |
          bun run test:email
          echo "✅ Email Safety Audit Passed"
          echo "All email sends are properly mocked in tests"
          echo "No risk of sending emails to real users during testing"
      
      - name: Verify email environment safety
        run: |
          if [ "$EMAIL_MODE" != "test" ]; then
            echo "❌ EMAIL_MODE is not set to 'test'"
            exit 1
          fi
          echo "✅ Email environment properly configured for testing"

  build-verification:
    runs-on: ubuntu-latest
    name: Build Verification
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      
      - name: Install dependencies
        run: bun install
      
      - name: Build application
        run: bun run build
        env:
          SKIP_ENV_VALIDATION: "1"
      
      - name: Verify build output
        run: |
          if [ ! -d ".next" ]; then
            echo "❌ Build failed: .next directory not found"
            exit 1
          fi
          echo "✅ Build successful"

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      
      - name: Install dependencies
        run: bun install
      
      - name: Run security audit
        run: bun audit
        continue-on-error: true
      
      - name: Check for exposed secrets
        run: |
          # Check for potential exposed secrets in code
          if grep -r "POSTMARK_SERVER_TOKEN\|AUTH_SECRET\|DATABASE_URL" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" --exclude-dir=node_modules --exclude-dir=.next .; then
            echo "⚠️ Warning: Potential hardcoded secrets found. Please review."
          else
            echo "✅ No hardcoded secrets detected"
          fi

  # Summary job that depends on all others
  test-summary:
    runs-on: ubuntu-latest
    name: Test Summary
    needs: [lint-and-type-check, unit-and-integration-tests, e2e-tests, email-audit, build-verification, security-scan]
    if: always()
    
    steps:
      - name: Test Suite Summary
        run: |
          echo "## Test Suite Summary"
          echo ""
          echo "### Results:"
          echo "- Lint & Type Check: ${{ needs.lint-and-type-check.result }}"
          echo "- Unit & Integration Tests: ${{ needs.unit-and-integration-tests.result }}"
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "- Email Safety Audit: ${{ needs.email-audit.result }}"
          echo "- Build Verification: ${{ needs.build-verification.result }}"
          echo "- Security Scan: ${{ needs.security-scan.result }}"
          echo ""
          
          if [ "${{ needs.lint-and-type-check.result }}" == "success" ] && \
             [ "${{ needs.unit-and-integration-tests.result }}" == "success" ] && \
             [ "${{ needs.e2e-tests.result }}" == "success" ] && \
             [ "${{ needs.email-audit.result }}" == "success" ] && \
             [ "${{ needs.build-verification.result }}" == "success" ]; then
            echo "✅ All tests passed! Safe to deploy."
          else
            echo "❌ Some tests failed. Please review before merging."
            exit 1
          fi